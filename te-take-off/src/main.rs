mod endpoints;
mod errors;
mod repository;
mod request;
mod session;

use rocket::{config::Config, routes};
use sqlx::postgres::PgPoolOptions;
use std::env;

#[rocket::main]
async fn main() -> Result<(), rocket::Error> {
    use crate::endpoints::*;
    use crate::repository::*;

    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL needs to be set");

    let db = PgPoolOptions::new()
        .max_connections(20)
        .connect(&database_url)
        .await
        .map_err(|e| {
            eprintln!("Error while creating db pool: {}", e);
            std::process::exit(-1);
        })
        .unwrap(); //This will never error out on unwrap so I am going to leave it like this

    match sqlx::migrate!().run(&db).await {
        Ok(_) => println!("Migrated successfully"),
        Err(e) => eprintln!("Migration failed, reason: {}", e),
    }

    // Generated by: openssl rand -base64 32, for now hardcoded, later lets use AWS secret manager
    let figment =
        Config::figment().merge(("secret_key", "moqEhJh7IKltOBGHpZPJ6TZyyZ2B0oznyXbfyYsVLOg="));
    let config = Config::from(figment);

    let repository = Repository::new(&db);
    let _rocket = rocket::custom(config)
        .mount(
            "/",
            routes![
                index,
                add_opinion,
                get_opinions,
                username_form,
                login_chooser,
                login_password,
                registration_form,
                register
            ],
        )
        .manage(repository)
        .launch()
        .await?;

    Ok(())
}
